# -*- coding: utf-8 -*-
"""Pandas_Practice 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1En2pxlN357A--Z7y_T12_9LGbn13h2V9
"""

import requests

# URL of the CSV file
url = "https://raw.githubusercontent.com/the-stranger-web/jovian_Data_Analyst/refs/heads/main/italy-covid-daywise.csv"

# Download the content
response = requests.get(url)

# Save it as a CSV file
with open("italy-covid-daywise.csv", "wb") as file:
    file.write(response.content)

print("File downloaded successfully!")


# this code i got from chat gpt

from urllib.request import urlretrieve

urlretrieve('https://raw.githubusercontent.com/the-stranger-web/jovian_Data_Analyst/refs/heads/main/italy-covid-daywise.csv',
            'italy-covid-daywise.csv')

import os
os.makedirs('./covid_data')

import pandas as pd
covid_df = pd.read_csv('/content/covid_data/italy-covid-daywise.csv')

print(covid_df)

covid_df.info()

covid_df.describe()

covid_df.columns

covid_df.shape

covid_df['new_cases']

type(covid_df['new_deaths'])

covid_df['new_cases'][246]

covid_df.at[246,'new_cases']

covid_df.new_cases

covid_df.loc[243]
type(covid_df.loc[243])

covid_df.head(3)

##gives first valid index of a non Nan value##
covid_df.new_tests.first_valid_index()  

covid_df.loc[108:112]

##gives a random sample of 10 rows##
covid_df.sample(10)

total_num_cases = covid_df.new_cases.sum()
total_deaths = covid_df.new_deaths.sum()
death_ratio = total_deaths/total_num_cases
print(f'total_num_cases: {total_num_cases},\ntotal_deaths:{total_deaths}\n death_ratio: {death_ratio:.2%}' )

intial_tests = 935310
total_tests = intial_tests + covid_df.new_tests.sum()
print(f'total num of tests conducted :{total_tests}')

positive_rate = total_num_cases/total_tests
print(f' {positive_rate:.2%} of tests in italy led to positive diagnostics: {positive_rate:.2%}')

covid_df.describe()
 
highest_new_cases = covid_df.new_cases > 1000
print(highest_new_cases)

covid_df[highest_new_cases]

covid_df[covid_df.new_cases > 1000]

high_ratio_df = covid_df[((covid_df.new_cases/covid_df.new_tests) > positive_rate)]
print(high_ratio_df.count())

print(covid_df)

print(covid_df)

covid_df.drop('positive_rate',inplace = True, axis = 1)

covid_df['positive_rate'] = covid_df.new_cases/covid_df.new_tests
print(covid_df)

covid_df.sort_values('new_cases',ascending = False,axis = 0).head(10)

covid_df.sort_values('new_deaths',ascending = False,axis = 0).head(10)

covid_df.sort_values('new_cases',ascending = True,axis = 0).head(10)

covid_df.at[172,'new_cases'] = (covid_df.at[171,'new_cases']+covid_df.at[170,'new_cases'])/2

covid_df.loc[172]

print(covid_df['date'].dtype)

covid_df['date'] = pd.to_datetime(covid_df.date)

covid_df.info()

covid_df['date']

covid_df['year'] = pd.DatetimeIndex(covid_df.date).year
covid_df['month'] = pd.DatetimeIndex(covid_df.date).month
covid_df['day'] = pd.DatetimeIndex(covid_df.date).day
covid_df['weekday'] = pd.DatetimeIndex(covid_df.date).weekday
print(covid_df)

covid_df_may = covid_df[covid_df.month ==5]
print(covid_df_may)

covid_df_may_metric = covid_df_may[['new_cases','new_deaths','new_tests']]
print(covid_df_may_metric)

covid_may_totals = covid_df_may_metric.sum()

print(covid_may_totals)

type(covid_may_totals)

covid_df_may_total1 = covid_df[covid_df.month ==5][['new_cases','new_deaths','new_tests']].sum()
print(covid_df_may_total1)

# Finding overall avg
import math
math.ceil(covid_df.new_cases.mean())
# print(covid_df_avg)

# Finding sun avg
covid_avg_sun = covid_df[covid_df.weekday==6][['new_cases']].mean()
print(covid_avg_sun)

covid_df_month = covid_df.groupby('month')[['new_cases','new_tests','new_deaths']].sum()
print(covid_df_month)

covid_df['total_cases'] = covid_df['new_cases'].cumsum()
covid_df['total_deaths'] = covid_df['new_deaths'].cumsum()
covid_df['total_tests'] = covid_df['new_tests'].cumsum()+intial_tests
print(covid_df)

covid_df_week_mean = covid_df.groupby('weekday')[['new_cases','new_tests','new_deaths']].mean()
print(covid_df_week_mean.round(2))

locations_df = pd.read_csv('/content/covid_data/location.csv')
print(locations_df)



locations_df

# print(locations_df.continent.unique())

if 'Italy' in locations_df.location.unique() :
  print('available')
else: print('not available')

locations_df[locations_df.location == 'Italy']

covid_df['location'] = 'Italy'

covid_df

merged_df = covid_df.merge(locations_df, on='location')

merged_df

merged_df['cases_per_million'] = merged_df.total_cases*1e6/merged_df.population
merged_df['deaths_per_million'] = merged_df.total_tests*1e6/merged_df.population
merged_df['tests_per_million'] = merged_df.total_deaths*1e6/merged_df.population

merged_df

results_df = merged_df[['date','new_cases','total_cases','new_tests','total_tests','new_deaths','total_deaths','cases_per_million','tests_per_million','deaths_per_million']]

results_df

results_df.to_csv('results.csv',index=None)



results_df

results_df.new_cases.plot()

results_df.set_index('date',inplace=True)

results_df

results_df.loc['2020-08-01']

results_df.new_cases.plot()
results_df.new_deaths.plot()

results_df.total_cases.plot()
results_df.total_deaths.plot()

death_rate = results_df.total_deaths/results_df.total_cases

death_rate.plot(title='Death Rate')

positive_rates = results_df.total_cases/results_df.total_tests
positive_rates.plot(title = 'Positive Rate')

covid_df_month

covid_df_month.new_cases.plot(kind = 'bar')

covid_df_month.new_tests.plot(kind = 'bar')